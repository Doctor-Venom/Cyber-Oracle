from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
import yagmail
import json
from pathlib import Path
import logging
from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver

# Create your models here.
def get_default_alert_data():
    return {
        'data' : None
    }


class Alert(models.Model):
    source_type = models.CharField(max_length=255) # either host_generated or locally_generated
    source_id = models.ForeignKey("api.Host", on_delete=models.CASCADE, default=None, null=True, blank=True) # the host that generated the alert, or Null if the alert was locally generated by host information processor
    severity_score = models.IntegerField(validators=[MinValueValidator(-1), MaxValueValidator(10)]) # a number between 0 and 10 that indicates the severity score of the alert
    date_time = models.DateTimeField(auto_now=False, auto_now_add=True) # date and time of alert generation
    is_viewed = models.BooleanField(default=False) # indicates whether the user viewed this alert or no
    data = models.JSONField(default=get_default_alert_data, null=True, blank=True) # additional data with the alert

    @property
    def severety_level(self):
        severety_levels = ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL', 'EMERGENCY', 'INFO', 'UNKNOWN']
        if   0 <= self.severity_score <= 2: return severety_levels[0]
        elif 3 <= self.severity_score <= 5: return severety_levels[1]
        elif 6 <= self.severity_score <= 8: return severety_levels[2]
        elif      self.severity_score == 9: return severety_levels[3]
        elif      self.severity_score == 10: return severety_levels[4]
        elif      self.severity_score == -1: return severety_levels[5]
        else: return severety_levels[6]




@receiver(post_save, sender=Alert)
def send_email_notification(sender, instance, **kwargs):
    alert = instance # this is useless i know, but just for readability
    with open(f'{settings.BASE_DIR}/config_files/CMConfig.json', 'r') as sf: current_settings = json.load(sf)
    if current_settings.get('EMAIL_ALERT_NOTIFICATION', False) and alert.severity_score >= int(current_settings.get('NOTIFICATOIN_MINIMUM_ALERT_SEVERITY_SCORE', float('inf'))):
        try:
            yag = yagmail.SMTP(user=current_settings.get('NOTIFICATION_SERVICE_EMAIL', ''), password=current_settings.get('NOTIFICATION_SERVICE_PASSWORD', ''))
            for email_address in current_settings.get('ADMIN_EMAIL_ADDRESSES', []):
                try:
                    yag.send(to=email_address, subject=f'Cyberoracle Alert Notification - Severety: {alert.severety_level}', contents=alert.data.get('general_info', 'No Info Available! Check Central Monitor For More Information.'))
                    logging.info(f"Email notification was sent successfully to {email_address}")
                except Exception as e:
                    logging.warning(f"Error! email notification was not sent to {email_address} because {e}")
        except Exception as e:
            logging.error(f'Error occured while connecting to SMTP server via yagmail. {e}')